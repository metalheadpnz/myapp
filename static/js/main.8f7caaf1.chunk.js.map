{"version":3,"sources":["components/pokemonCard/pokemonCard.module.css","components/preloader/preloader.module.css","components/login/login.module.css","components/categories/categories.module.css","img/arrowBtn.svg","img/Arrow_mini.svg","components/conform/conform.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Conform","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,4BAA4B,KAAO,0BAA0B,iBAAmB,sCAAsC,OAAS,4BAA4B,UAAY,+BAA+B,GAAK,wBAAwB,KAAO,0BAA0B,YAAc,iCAAiC,UAAY,+BAA+B,QAAU,+B,mBCAzcD,EAAOC,QAAU,CAAC,UAAY,+B,kBCA9BD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,mBAAqB,kCAAkC,sBAAwB,qCAAqC,WAAa,0BAA0B,cAAgB,6BAA6B,MAAQ,qBAAqB,MAAQ,qBAAqB,MAAQ,uB,4DCAvTD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,2BAA2B,OAAS,2BAA2B,KAAO,yBAAyB,QAAU,4BAA4B,eAAiB,mCAAmC,KAAO,yBAAyB,cAAgB,kCAAkC,UAAY,8BAA8B,OAAS,2BAA2B,OAAS,2BAA2B,SAAW,+B,mHCDxb,I,gBCAA,ICwDAC,I,0BCrCAC,MAXf,WAAgB,IAAD,EAEaC,oBAAS,GAFtB,mBAIX,OAJW,UAKP,kECDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f7caaf1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"pokemonCard_wrap__1jxAe\",\"header\":\"pokemonCard_header__2PYvZ\",\"logout\":\"pokemonCard_logout__mD2rY\",\"back\":\"pokemonCard_back__2x9xN\",\"contentContainer\":\"pokemonCard_contentContainer__3jFym\",\"bigPic\":\"pokemonCard_bigPic__3AkYg\",\"infoPanel\":\"pokemonCard_infoPanel__20qhn\",\"hr\":\"pokemonCard_hr__10BWP\",\"flex\":\"pokemonCard_flex__3GVar\",\"description\":\"pokemonCard_description__U7sOP\",\"leftPanel\":\"pokemonCard_leftPanel__35mcw\",\"imgTest\":\"pokemonCard_imgTest__119Zp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"preloader_preloader__2wRU9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"login_wrap__1PgAK\",\"positionLoginField\":\"login_positionLoginField__fCjrg\",\"positionPasswordField\":\"login_positionPasswordField__2GGab\",\"inputField\":\"login_inputField__ahj1Z\",\"arrowLoginBtn\":\"login_arrowLoginBtn__2qk1X\",\"label\":\"login_label__VLxfk\",\"input\":\"login_input__1_RPq\",\"error\":\"login_error__3n9qT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wraper\":\"categories_wraper__1fDyF\",\"header\":\"categories_header__3sQNV\",\"pannel\":\"categories_pannel__1RQbd\",\"main\":\"categories_main__2M-Z1\",\"content\":\"categories_content__3QS33\",\"categorySelect\":\"categories_categorySelect__2TNP1\",\"type\":\"categories_type__1UnbN\",\"categoryLabel\":\"categories_categoryLabel__1uxuY\",\"arrowMini\":\"categories_arrowMini__dfCKB\",\"logout\":\"categories_logout__1nMBy\",\"select\":\"categories_select__2D8bG\",\"smallPic\":\"categories_smallPic__uaIq4\"};","export default __webpack_public_path__ + \"static/media/arrowBtn.c252fcc9.svg\";","export default __webpack_public_path__ + \"static/media/Arrow_mini.82384630.svg\";","import React, {useEffect, useState} from \"react\";\r\nimport styles from \"../login/login.module.css\";\r\nimport arrowLoginBtn from \"../../img/arrowBtn.svg\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nfunction Conform(props) {\r\n\r\n    function createOTP() {\r\n        return Math.floor(1000 + Math.random() * (9999 + 1 - 1000))\r\n    }\r\n\r\n    function OTPOnClick() {\r\n        if (state.input == state.OTP) {\r\n            setState({\r\n                ...state, conform: true, errorClass: null\r\n            })\r\n\r\n        } else {\r\n            setState({...state, errorClass: styles.error})\r\n        }\r\n    }\r\n\r\n    function onInputChange(event) {\r\n        setState({...state, input: event.target.value})\r\n    }\r\n\r\n    let [state, setState] = useState({\r\n        OTP: 9999,\r\n        input: \"\",\r\n        conform: false,\r\n        errorClass: null\r\n    });\r\n\r\n    useEffect(() => {\r\n            // createOTP();\r\n            setState({...state, OTP: createOTP()});\r\n        }, []\r\n    )\r\n\r\n    if (state.conform) return <Redirect to={\"/categories\"}/>\r\n    if (!props.auth) return <Redirect to={\"/login\"}/>\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.wrap}>\r\n                <div className={`${styles.inputField} ${styles.positionLoginField} ${state.errorClass}`}>\r\n                    <label htmlFor=\"login\" className={styles.label}>Code from SMS {state.OTP}</label>\r\n                    <input id=\"login\" type=\"text\" className={styles.input} value={state.input}\r\n                           onChange={onInputChange}/>\r\n                </div>\r\n                <img className={styles.arrowLoginBtn} src={arrowLoginBtn} onClick={OTPOnClick}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Conform;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Login from \"./components/login/login\";\r\nimport Conform from \"./components/conform/conform\";\r\nimport Categories from \"./components/categories/categories\";\r\nimport PokemonCard from \"./components/pokemonCard/pokemonCard\";\r\nimport {Route} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n    const [auth, setAuth] = useState(false)\r\n\r\n    return (\r\n        <div>\r\n            риакт\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}